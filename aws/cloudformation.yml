AWSTemplateFormatVersion: '2010-09-09'
Description: APIAWS CloudFormation Template
Transform: AWS::SecretsManager-2020-07-23

Parameters:
  SubDomain:
    Description: Subdomain for the API
    Type: String
  ImageID:
    Description: Image ID for the instance (Default Debian 12 eu-north-1)
    Default: ami-01427dce5d2537266
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:  
  #############################
  # Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Sub "${AWS::Region}a"
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Sub "${AWS::Region}b"
      Tags:
        - Key: Name
          Value: PublicSubnet2

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable
  
  #############################
  ## S3
  S3PrivateBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-s3-private"
      AccessControl: Private
  
  S3PublicBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-s3-public"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  PublicBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3PublicBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${S3PublicBucket}/*'

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"
        - PolicyName: AccessS3PrivateBucketPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${AWS::StackName}-s3-private"
        - PolicyName: AccessS3PublicBucketPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${AWS::StackName}-s3-public"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EC2InstanceRole
  
  #############################
  # Compute 
  APIInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageID
      InstanceType: t3.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref KeyName
      UserData: 
        Fn::Base64: !Sub 
          - |
            #!/bin/bash

            sudo apt upgrade -y
            sudo apt-get install -y awscli
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo apt-get install -y git
            sudo npm i -g sequelize-cli typescript

            sudo -u admin ssh-keygen -t rsa -b 4096 -f /home/admin/.ssh/id_rsa -N ""
            chmod 600 /home/admin/.ssh/id_rsa
            chmod 644 /home/admin/.ssh/id_rsa.pub
            chown -R admin:admin /home/admin/.ssh

            openssl genrsa -out /home/admin/private.pem 2048
            openssl rsa -in /home/admin/private.pem -outform PEM -pubout -out /home/admin/public.pem
 
            DB_PORT='3306'
            echo "DB_PORT=$DB_PORT" | sudo tee -a /etc/environment
            DB_DATABASE='app'
            echo "DB_DATABASE=$DB_DATABASE" | sudo tee -a /etc/environment  
            DB_USERNAME='app'
            echo "DB_USERNAME=$DB_USERNAME" | sudo tee -a /etc/environment
            DB_HOST=${DBHost}
            echo "DB_HOST=$DB_HOST" | sudo tee -a /etc/environment
            DB_PASSWORD='password'
            echo "DB_PASSWORD=$DB_PASSWORD" | sudo tee -a /etc/environment

            sudo bash -c 'cat <<EOF > /lib/systemd/system/api.service 
            [Unit]
            Description=API
            After=network.target
            [Service]
            ExecStart=/usr/bin/node /home/admin/api/dist/index.js
            Restart=always
            RestartSec=5
            EnvironmentFile=/etc/environment
            User=root
            Group=nogroup
            Environment=PATH=/usr/bin:/usr/local/bin
            Environment=NODE_ENV=production
            WorkingDirectory=/home/admin/api
            [Install]
            WantedBy=multi-user.target
            EOF'
            
            sudo systemctl daemon-reload
          - SubDomain: !Ref SubDomain
            AWSRegion: !Sub "${AWS::Region}"
            DBHost: !GetAtt DBInstance.Endpoint.Address 
            DBPasswordSecretName: !Sub '${AWS::StackName}/db-secret'

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP, HTTPS and SSH traffic to ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  #############################
  # HTTP
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      Targets:
        - Id: !Ref APIInstance

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificate
      SslPolicy: ELBSecurityPolicy-2016-08

  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref SubDomain
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName:  !Ref SubDomain
          HostedZoneId: !Ref HostedZone

  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref SubDomain

  #############################
  # DB
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${AWS::StackName}-db"
      Engine: MySQL
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:password}}' ]]
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      PubliclyAccessible: true
      VPCSecurityGroups:
        - !GetAtt DBSecurityGroup.GroupId
      DBName: app
      BackupRetentionPeriod: 7
      StorageType: gp2

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable access to RDS MySQL instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}/db-secret'
      Description: Secret for database credentials
      GenerateSecretString:
        SecretStringTemplate: '{"username": "app"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\''^#|;:.,`'

  DBSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DBSecret
      TargetId: !Ref DBInstance
      TargetType: AWS::RDS::DBInstance


Outputs:
  LoadBalancerDNSName:
    Description: The DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
  APIURL:
    Description: 'Address of API admin'
    Value: !Join ['', ['https://', !Ref SubDomain ]]
  SSHCommand:
    Description: Command to SSH into the EC2 instance
    Value: !Join ['', ['ssh -i ', !Ref KeyName, '.pem admin@', !GetAtt APIInstance.PublicDnsName ]]
